{"version":3,"sources":["store/StoreProvider.js","Components/MoviesSearch/validationSchema.js","functions/requests/omdbapi.js","secrets/apiKey.js","functions/requests/search/search.js","Components/MoviesSearch/MoviesSearch.js","Components/Movie/subcomponents/Ratings.subcomponents.js","Components/Movie/Movie.js","Components/MoviesList/MoviesList.js","App.js","index.js"],"names":["StoreContext","createContext","StoreProvider","children","useState","movies","setMovies","Provider","value","validationSchema","Yup","shape","movieToSearch","required","omdbapi","axios","create","baseURL","validateStatus","movie","a","get","params","t","i","data","Response","console","error","MoviesSearch","useContext","formik","useFormik","initialValues","onSubmit","values","getMovie","titleError","errors","className","handleSubmit","htmlFor","name","onChange","handleChange","type","Ratings","ratings","map","rat","Source","Value","length","Movie","src","Poster","alt","Title","imdbRating","imdbVotes","Year","Director","Genre","Language","Country","Production","Runtime","Plot","Actors","Released","Writer","Metascore","Awards","BoxOffice","DVD","MoviesList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAEaA,EAAeC,wBAAc,MAiB3BC,EAfO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACRC,mBAAS,IADD,mBAC7BC,EAD6B,KACrBC,EADqB,KAGpC,OACI,cAACN,EAAaO,SAAd,CACAC,MAAO,CACHH,SACAC,aAHJ,SAMKH,K,wBCZAM,EAAmB,kBAAMC,MAAaC,MAAM,CACvDC,cAAeF,MACNG,SAAS,+B,iCCAPC,E,OAAUC,EAAMC,OAAO,CAChCC,QAAQ,kCAAD,OCLW,YDMlBC,gBAAgB,I,4CEJb,WAAwBC,EAAOb,GAA/B,iBAAAc,EAAA,+EAEwBN,EAAQO,IAAI,GAAK,CACpCC,OAAQ,CACJC,EAAGJ,EACHK,EAAE,eALX,mBAQuB,WANdC,EAFT,EAESA,MAMCC,SARV,iDAU+B,SAAlBD,EAAKC,UACbpB,EAAUmB,GAXf,0DAcCE,QAAQC,MAAR,MAdD,2D,sBCMP,IAqCeC,EArCM,WAAO,IAChBvB,EAAcwB,qBAAW9B,GAAzBM,UACFyB,EAASC,YAAU,CACrBC,cAAe,CACbrB,cAAe,IAEjBH,mBACAyB,SAAU,SAAAC,IDbX,SAAP,6BCcYC,CAASD,EAAOvB,cAAeN,MAK/B+B,EAAaN,EAAOO,OAAO1B,cAC/B,mBAAG2B,UAAU,YAAb,SAA0BR,EAAOO,OAAO1B,gBACtC,KAEJ,OAEE,qCACE,sBAAM2B,UAAU,OAAOL,SAAUH,EAAOS,aAAxC,SACE,wBAAOC,QAAQ,GAAf,UACE,uBAEAC,KAAK,gBACLC,SAAUZ,EAAOa,aACjBpC,MAAOuB,EAAOI,OAAOvB,cACrBiC,KAAK,SAEL,wBAAQN,UAAU,SAASM,KAAK,SAAhC,yBAGHR,MCxBIS,G,OAbC,WAAO,IACXzC,EAAWyB,qBAAW9B,GAAtBK,OACF0C,EAAU1C,EAAOyC,QAAQE,KAAI,SAAAC,GAAG,OAClC,8BAAqB,uBAAMV,UAAU,sBAAhB,UAAuCU,EAAIC,OAA3C,OAArB,IAAiFD,EAAIE,QAA7EF,EAAIC,WAEhB,OACA,mCAEQ7C,EAAOyC,QAAQM,OAAS,EAAI,sBAAKb,UAAU,gBAAf,UAA+B,sBAAMA,UAAU,sBAAhB,sBAA/B,IAAsFQ,KAAiB,SCsBhIM,EA5BF,WAAO,IACRhD,EAAWyB,qBAAW9B,GAAtBK,OACR,OACI,sBAAKkC,UAAU,QAAf,UACI,qBAAKA,UAAU,eAAee,IAAKjD,EAAOkD,OAAQC,IAAI,KACtD,sBAAKjB,UAAU,oBAAf,UACI,oBAAGA,UAAU,cAAb,UAA4BlC,EAAOoD,MAAnC,IAA0C,iCAAOpD,EAAOqD,WAAd,QAA+BrD,EAAOsD,UAAtC,gBAC1C,4BAAItD,EAAOuD,OACX,oCAAOvD,EAAOwD,YACd,4BAAIxD,EAAOyD,QACU,QAApBzD,EAAO0D,SAAqB,8BAAG,sBAAMxB,UAAU,oBAAhB,uBAAH,IAAyDlC,EAAO0D,YAAe,KACxF,QAAnB1D,EAAO2D,QAAoB,8BAAG,sBAAMzB,UAAU,oBAAhB,sBAAH,IAAwDlC,EAAO2D,WAAc,KAClF,QAAtB3D,EAAO4D,WAAuB,8BAAG,sBAAM1B,UAAU,oBAAhB,yBAAH,IAA2DlC,EAAO4D,cAAiB,KAClH,8BAAG,sBAAM1B,UAAU,oBAAhB,sBAAH,IAAwDlC,EAAO6D,WAC/D,4BAAI7D,EAAO8D,OACX,8BAAG,sBAAM5B,UAAU,oBAAhB,sBAAoDlC,EAAO+D,UAC9D,8BAAG,sBAAM7B,UAAU,oBAAhB,uBAAH,IAAyDlC,EAAOgE,YAChE,8BAAG,sBAAM9B,UAAU,oBAAhB,uBAAqDlC,EAAOiE,UACzC,QAArBjE,EAAOkE,UAAsB,8BAAG,sBAAMhC,UAAU,oBAAhB,wBAAH,IAA0DlC,EAAOkE,aAAgB,KAC5F,QAAlBlE,EAAOmE,OAAmB,8BAAG,sBAAMjC,UAAU,oBAAhB,qBAAH,IAAuDlC,EAAOmE,UAAa,KAChF,QAArBnE,EAAOoE,UAAsB,8BAAG,sBAAMlC,UAAU,oBAAhB,wBAAH,IAA0DlC,EAAOoE,aAAgB,KAC/F,QAAfpE,EAAOqE,IAAgB,8BAAG,sBAAMnC,UAAU,oBAAhB,kBAAH,IAAoDlC,EAAOqE,OAAU,KAC7F,cAAC,EAAD,WClBDC,EALG,WAEd,MAAoB,KADD7C,qBAAW9B,GAAtBK,OACiB,cAAC,EAAD,IAAY,MCa1BuE,MAZf,WACE,OACE,cAAC,EAAD,UACE,sBAAKrC,UAAU,MAAf,UACE,+FACA,cAAC,EAAD,IACA,cAAC,EAAD,UCRRsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.d1474e80.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const StoreContext = createContext(null)\n\nconst StoreProvider = ({ children }) => {\n    const [movies, setMovies] = useState('')\n    \n    return(\n        <StoreContext.Provider \n        value={{\n            movies,\n            setMovies,\n        }}\n        >\n            {children}\n        </StoreContext.Provider>\n    )\n}\n\nexport default StoreProvider","import * as Yup from 'yup'\n\nexport const validationSchema = () => Yup.object().shape({\n  movieToSearch: Yup.string()\n          .required('Please, write your title')\n      })","import { apiKey } from \"../../secrets/apiKey\"\nimport axios from 'axios'\n\n\nexport const omdbapi = axios.create({\n    baseURL: `http://www.omdbapi.com?&apikey=${apiKey}`,\n    validateStatus: false\n})","export const apiKey = '786e113e'","import { omdbapi } from \"../omdbapi\"\n\nexport async function getMovie(movie, setMovies){\n    try{\n        const { data } = await omdbapi.get('' , {\n            params: {\n                t: movie,\n                i:'tt3896198'\n              }\n        })\n        if (data.Response === \"False\"){\n            return\n        } else if ( data.Response === \"True\") {\n            setMovies(data)\n        }\n    } catch(error){\n        console.error(error)\n    }\n}","import React, { useContext } from 'react';\nimport \"../../styles/MovieSearch.css\"\nimport { useFormik } from \"formik\"\nimport { validationSchema } from \"./validationSchema\"\nimport { StoreContext } from \"../../store/StoreProvider\"\n\nimport { getMovie } from \"../../functions/requests/search/search\"\n\nconst MoviesSearch = () => {\n    const { setMovies } = useContext(StoreContext)\n    const formik = useFormik({\n        initialValues: {\n          movieToSearch: '',\n        },\n        validationSchema,\n        onSubmit: values => {\n            getMovie(values.movieToSearch, setMovies)\n        }\n      })\n\n\n      const titleError = formik.errors.movieToSearch ? (\n        <p className='has-error'>{formik.errors.movieToSearch}</p>\n      ) : null\n    \n      return (\n        \n        <>\n          <form className=\"form\" onSubmit={formik.handleSubmit}>\n            <label htmlFor=\"\">\n              <input \n              \n              name=\"movieToSearch\"\n              onChange={formik.handleChange}\n              value={formik.values.movieToSearch} \n              type=\"text\"\n              />\n              <button className=\"submit\" type=\"submit\">Search</button>\n            </label>\n          </form>\n          {titleError}\n        </>\n      );\n    }\n \nexport default MoviesSearch;","import React, { useContext } from 'react';\nimport { StoreContext } from '../../../store/StoreProvider';\n\nconst Ratings = () => {\n    const { movies } = useContext(StoreContext)\n    const ratings = movies.Ratings.map(rat => (\n        <p key={rat.Source} ><span className=\"movie-rating-source\">{rat.Source}:</span> {rat.Value}</p>\n    ))\n    return ( \n    <>\n        {\n            movies.Ratings.length > 0 ? <div className=\"movie-ratings\"><span className=\"movie-ratings-title\">Ratings:</span> {ratings}</div> : null\n        }\n     </>);\n}\n \nexport default Ratings;","import React, { useContext } from 'react';\nimport \"../../styles/Movie.css\"\nimport { StoreContext } from '../../store/StoreProvider';\nimport Ratings from \"./subcomponents/Ratings.subcomponents\"\n\nconst Movie= () => {\n    const { movies } = useContext(StoreContext)\n    return ( \n        <div className=\"movie\">\n            <img className=\"movie-poster\" src={movies.Poster} alt=\"\"/>\n            <div className=\"movie-description\">\n                <p className=\"movie-title\">{movies.Title} <span>{movies.imdbRating}/10 ({movies.imdbVotes} votes)</span></p>\n                <p>{movies.Year}</p>\n                <p>by {movies.Director}</p>\n                <p>{movies.Genre}</p>\n                {movies.Language !== \"N/A\" ? <p><span className=\"movie-attribution\">Language:</span> {movies.Language}</p>: null}\n                {movies.Country !== \"N/A\" ? <p><span className=\"movie-attribution\">Country:</span> {movies.Country}</p>: null}\n                {movies.Production !== \"N/A\" ? <p><span className=\"movie-attribution\">Production:</span> {movies.Production}</p>: null}\n                <p><span className=\"movie-attribution\">Runtime:</span> {movies.Runtime}</p>\n                <p>{movies.Plot}</p>\n                <p><span className=\"movie-attribution\">Actors: </span>{movies.Actors}</p>\n                <p><span className=\"movie-attribution\">Released:</span> {movies.Released}</p>\n                <p><span className=\"movie-attribution\">Writers: </span>{movies.Writer}</p>\n                {movies.Metascore !== \"N/A\" ? <p><span className=\"movie-attribution\">Metascore:</span> {movies.Metascore}</p>: null}\n                {movies.Awards !== \"N/A\" ? <p><span className=\"movie-attribution\">Awards:</span> {movies.Awards}</p>: null}\n                {movies.BoxOffice !== \"N/A\" ? <p><span className=\"movie-attribution\">BoxOffice:</span> {movies.BoxOffice}</p>: null}\n                {movies.DVD !== \"N/A\" ? <p><span className=\"movie-attribution\">DVD:</span> {movies.DVD}</p>: null}\n                <Ratings />\n            </div>\n        </div>\n    );\n}\n \nexport default Movie","import React, { useContext } from 'react';\nimport { StoreContext } from '../../store/StoreProvider';\nimport Movie from \"../Movie/Movie\"\n\nconst MoviesList= () => {\n    const { movies } = useContext(StoreContext)\n    return ( movies !== '' ? <Movie /> : null );\n}\n \nexport default MoviesList","import React from 'react';\nimport './styles/App.css';\n\nimport StoreProvider from './store/StoreProvider'\nimport MoviesSearch from \"./Components/MoviesSearch/MoviesSearch\"\nimport MoviesList from \"./Components/MoviesList/MoviesList\"\n\nfunction App() {\n  return (\n    <StoreProvider>\n      <div className=\"App\">\n        <h1>Welcome to the Moviespedia. Type your favourite movie's title</h1>\n        <MoviesSearch />\n        <MoviesList />\n      </div>\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}